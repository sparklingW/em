import { store } from '../store.js'

// util
import { equalThoughtRanked } from './equalThoughtRanked.js'
import { flatten } from './flatten.js'
import { head } from './head.js'
import { splice } from './splice.js'
import { getContextsSortedAndRanked } from './getContextsSortedAndRanked.js'

/** Merges thoughts into a context chain, removing the overlapping head */
// use autogenerated rank of context
// if there is no/empty context chain, return thoughtsRanked as-is
export const chain = (contextChain, thoughtsRanked, thoughtIndex = store.getState().thoughtIndex) => {

  if (!contextChain || contextChain.length === 0) return thoughtsRanked

  const pivot = head(contextChain[contextChain.length - 1])
  const i = thoughtsRanked.findIndex(child => equalThoughtRanked(child, pivot))
  const append = thoughtsRanked.slice(i - 1)
  const contexts = getContextsSortedAndRanked(pivot.value, thoughtIndex)
  const appendedThoughtInContext = contexts.find(child => head(child.context) === append[0].value)

  return flatten(
    // keep the first segment intact
    // then remove the overlapping head of each one after
    contextChain.concat([
      appendedThoughtInContext
        ? [{ value: append[0].value, rank: appendedThoughtInContext.rank }].concat(append.slice(1))
        : append
    ]).map((thoughts, i) => i > 0 ? splice(thoughts, 1, 1) : thoughts)
  )
}
// assert.deepEqual(chain(
//   [
//     [{ value: 'a', rank: 0 }, { value: 'b', rank: 0 }]
//   ],
//   [{ value: 'a', rank: 0 }, { value: 'b', rank: 0 }, { value: 'c', rank: 0 }],
// ), [{ value: 'a', rank: 0 }, { value: 'b', rank: 0 }, { value: 'a', rank: 0 }, { value: 'c', rank: 0 }])

// assert.deepEqual(pathToContext(chain(
//   [
//     rankThoughtsSequential(['2', 'A']),
//     rankThoughtsSequential(['1', 'A', 'Nope']),
//   ],
//   rankThoughtsSequential(['START', 'B', 'Nope', 'Butter', 'Bread'])
// )), ['2', 'A', '1', 'Nope', 'B', 'Butter', 'Bread'])
